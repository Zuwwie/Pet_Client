import { useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import "./packaging.css";

import { PACKAGING_OPTIONS } from "@/services/packaging.options";
import type { IPackaging } from "@/models/IPackaging";
import { formatUAH, getTotals, addPack, getPackQty, onCartChange } from "@/cart/store.ts";

export default function PackagingPage() {
    const navigate = useNavigate();

    // —Å—É–º–∞ –≤–∞–≥–∏ –∑ –∫–æ—à–∏–∫–∞ —Ü—É–∫–µ—Ä–æ–∫ (–¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏ "–≤–º—ñ—Å—Ç–∏—Ç—å/–Ω–µ –≤–º—ñ—Å—Ç–∏—Ç—å")
    const [totalWeightG, setTotalWeightG] = useState(0);
    useEffect(() => {
        const upd = () => setTotalWeightG(getTotals().totalWeightG);
        upd();
        return onCartChange(upd);
    }, []);

    // –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Å—Ç–µ–ø–ø–µ—Ä—ñ–≤ –ø–æ –∫–∞—Ä—Ç–∫–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)
    const [qty, setQty] = useState<Record<string, number>>({});
    const setLocal = (id: string, v: number) =>
        setQty((m) => ({ ...m, [id]: Math.max(1, Math.floor(v) || 1) }));

    const dec = (id: string) => setLocal(id, (qty[id] ?? 1) - 1);
    const inc = (id: string) => setLocal(id, (qty[id] ?? 1) + 1);

    const hintFor = (p: IPackaging) => {
        if (!p.capacityG || p.capacityG <= 0) return null;
        if (totalWeightG === 0) return null;
        const ok = totalWeightG <= p.capacityG;
        return ok ? "‚úÖ –≤–º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É" : "‚ö†Ô∏è –Ω–µ –≤–º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É";
    };

    const items = useMemo(() => {
        const arr = [...PACKAGING_OPTIONS];
        arr.sort((a, b) => {
            const isBagA = a.name.toLowerCase().includes("–ø–∞–∫–µ—Ç");
            const isBagB = b.name.toLowerCase().includes("–ø–∞–∫–µ—Ç");
            if (isBagA !== isBagB) return isBagA ? 1 : -1; // –∫–æ—Ä–æ–±–∫–∏ —Å–ø–æ—á–∞—Ç–∫—É
            return (a.capacityG ?? 0) - (b.capacityG ?? 0);
        });
        return arr;
    }, []);

    // —â–æ–± –∫–∞—Ä—Ç–∫–∏ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏ ¬´–í –∫–æ—à–∏–∫—É N¬ª –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑ —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    const [, force] = useState(0);
    useEffect(() => onCartChange(() => force((x) => x + 1)), []);

    return (
        <div className="pack-page">
            <div className="pack-head">
                <h1 className="pack-title">–ü–∞–∫—É–≤–∞–Ω–Ω—è</h1>
                <div className="pack-tools">
                    <button className="btn link" type="button" onClick={() => navigate("/basket")}>
                        –î–æ –∫–æ—à–∏–∫–∞
                    </button>
                </div>
            </div>

            <div className="pack-grid">
                {items.map((p) => {
                    const id = (p as any).id ?? (p as any)._id;
                    const hint = hintFor(p);
                    const inCartQty = getPackQty(id); // —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
                    const q = qty[id] ?? 1;

                    return (
                        <article key={id} className="pack-card is-vertical">
                            <div className="pack-media">
                                {p.imageUrl ? (
                                    <img src={p.imageUrl} alt={p.name} loading="lazy" decoding="async" />
                                ) : (
                                    <div className="ph">üéÅ</div>
                                )}
                            </div>

                            <h3 className="pack-name">{p.name}</h3>
                            <div className="pack-sub">
                                {p.capacityG ? <>–¥–æ ~{p.capacityG} –≥</> : <>–±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è</>}
                            </div>

                            <div className="pack-actions">
                                <div className="pack-price">{formatUAH(p.priceKop)}</div>
                                {hint ? (
                                    <div className={`pack-hint ${hint.includes("‚ö†Ô∏è") ? "bad" : "ok"}`}>{hint}</div>
                                ) : (
                                    <div className="pack-hint">&nbsp;</div>
                                )}

                                {/* –°—Ç–µ–ø–ø–µ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ */}
                                <div className="pack-qty">
                                    <button className="pack-qty-btn" type="button" onClick={() => dec(id)}>‚àí</button>
                                    <div className="pack-qty-input">{q}</div>
                                    <button className="pack-qty-btn" type="button" onClick={() => inc(id)}>+</button>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞—Ç–∏ */}
                                <button
                                    className="btn solid pack-btn"
                                    type="button"
                                    onClick={() => { addPack(p, q); setLocal(id, 1); }}
                                >
                                    –î–æ–¥–∞—Ç–∏ {q > 1 ? `√ó${q}` : ""} –≤ –∫–æ—à–∏–∫
                                </button>

                                {/* –ë–µ–π–¥–∂ —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –¥–æ–¥–∞–Ω–æ */}
                                {inCartQty > 0 ? (
                                    <div className="pack-hint ok">–í –∫–æ—à–∏–∫—É: {inCartQty}</div>
                                ) : (
                                    <div className="pack-hint">&nbsp;</div>
                                )}
                            </div>
                        </article>
                    );
                })}
            </div>
        </div>
    );
}
